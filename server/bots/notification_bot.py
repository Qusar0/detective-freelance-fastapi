import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from sqlalchemy import select
import asyncio

from server.api.conf.config import settings
from server.api.database.database import async_session
from server.api.models.models import ServicesBalance


bot = Bot(token=settings.notification_bot_token, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])
async def send_connects(message: Message):
    chat_id = message.chat.id
    url = f"{settings.frontend_url}/connect_tg?chat={chat_id}"
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {url}")


async def send_notification(chat_id: int, text: str):
    await bot.send_message(chat_id, f'–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É "{text}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω')


async def send_balance_alert(chat_id: int, text: str):
    try:
        await bot.send_message(chat_id, text)
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def check_balances():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞."""
    try:
        async with async_session() as session:
            result = await session.execute(select(ServicesBalance))
            services = result.scalars().all()
            
            for service in services:
                if service.balance is not None and service.balance < settings.balance_threshold:
                    message = (
                        f"‚ö†Ô∏è <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –ë–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞ `{service.service_name}` "
                        f"–æ–ø—É—Å—Ç–∏–ª—Å—è –Ω–∏–∂–µ `{settings.balance_threshold}`. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: `{service.balance}`"
                    )
                    await send_balance_alert(settings.admin_chat_id, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")


async def periodic_balance_check():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞."""
    while True:
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤...")
        await check_balances()
        await asyncio.sleep(settings.check_interval)


async def on_startup(_):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    asyncio.create_task(periodic_balance_check())


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        from aiogram import executor
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logging.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    


